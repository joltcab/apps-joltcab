diff --git a/frontend/src/store/authStore.ts b/frontend/src/store/authStore.ts
index 6cb0e66..9cceff1 100644
--- a/frontend/src/store/authStore.ts
+++ b/frontend/src/store/authStore.ts
@@ -8,8 +8,8 @@ interface AuthState {
   token: string | null;
   loading: boolean;
   isAuthenticated: boolean;
-  login: (email: string, password: string) => Promise<void>;
-  register: (email: string, password: string, full_name: string, phone: string) => Promise<void>;
+  login: (emailOrPhone: string, password: string) => Promise<void>;
+  register: (firstName: string, lastName: string, email: string, phone: string, password: string, countryCode: string, country: string) => Promise<void>;
   logout: () => Promise<void>;
   loadUser: () => Promise<void>;
   updateProfile: (data: Partial<User>) => Promise<void>;
@@ -24,53 +24,98 @@ export const useAuthStore = create<AuthState>((set, get) => ({
   login: async (emailOrPhone: string, password: string) => {
     set({ loading: true });
     try {
-      console.log('üîê Attempting login...');
+      console.log('üîê Attempting login with joltcab.com...');
       
       // Detectar si es email o tel√©fono
       const isEmail = emailOrPhone.includes('@');
-      const loginData = isEmail 
-        ? { email: emailOrPhone, password }
-        : { phone: emailOrPhone, password };
+      const loginData = {
+        email: isEmail ? emailOrPhone : '',
+        phone: isEmail ? '' : emailOrPhone,
+        password,
+        device_type: 'web',
+        login_by: 'manual'
+      };
       
       console.log('üìß Login type:', isEmail ? 'Email' : 'Phone');
       
-      const response = await api.post('/api/auth/login', loginData);
-      const { access_token, user } = response.data;
-      
-      console.log('‚úÖ Login successful:', user.email);
-      await AsyncStorage.setItem('token', access_token);
-      await AsyncStorage.setItem('user', JSON.stringify(user));
+      const response = await api.post('/userslogin', loginData);
       
-      set({ user, token: access_token, isAuthenticated: true, loading: false });
+      if (response.data.success) {
+        const { token, user_id, first_name, last_name, email, phone, wallet, picture } = response.data;
+        
+        const user: User = {
+          user_id,
+          first_name,
+          last_name,
+          email,
+          phone,
+          wallet,
+          picture,
+          token
+        };
+        
+        console.log('‚úÖ Login successful:', user.email);
+        await AsyncStorage.setItem('token', token);
+        await AsyncStorage.setItem('user', JSON.stringify(user));
+        
+        set({ user, token, isAuthenticated: true, loading: false });
+      } else {
+        throw new Error('Login failed');
+      }
     } catch (error: any) {
-      console.error('‚ùå Login failed:', error.response?.data?.detail || error.message);
+      console.error('‚ùå Login failed:', error.response?.data?.message || error.message);
       set({ loading: false });
-      throw new Error(error.response?.data?.detail || 'Login failed');
+      throw new Error(error.response?.data?.message || 'Login failed');
     }
   },
 
-  register: async (email: string, password: string, full_name: string, phone: string) => {
+  register: async (firstName: string, lastName: string, email: string, phone: string, password: string, countryCode: string = '+1', country: string = 'United States') => {
     set({ loading: true });
     try {
-      console.log('üìù Attempting registration...');
-      const response = await api.post('/api/auth/register', {
+      console.log('üìù Attempting registration with joltcab.com...');
+      
+      const registerData = {
+        first_name: firstName,
+        last_name: lastName,
         email,
-        password,
-        full_name,
         phone,
-        role: 'user'
-      });
-      const { access_token, user } = response.data;
+        country_phone_code: countryCode,
+        country,
+        password,
+        login_by: 'manual',
+        device_type: 'web'
+      };
       
-      console.log('‚úÖ Registration successful:', user.email);
-      await AsyncStorage.setItem('token', access_token);
-      await AsyncStorage.setItem('user', JSON.stringify(user));
+      const response = await api.post('/userregister', registerData);
       
-      set({ user, token: access_token, isAuthenticated: true, loading: false });
+      if (response.data.success) {
+        const { token, user_id, first_name, last_name, email, phone, wallet, picture } = response.data;
+        
+        const user: User = {
+          user_id,
+          first_name,
+          last_name,
+          email,
+          phone: phone || '',
+          wallet: wallet || 0,
+          picture,
+          token,
+          country_phone_code: countryCode,
+          country
+        };
+        
+        console.log('‚úÖ Registration successful:', user.email);
+        await AsyncStorage.setItem('token', token);
+        await AsyncStorage.setItem('user', JSON.stringify(user));
+        
+        set({ user, token, isAuthenticated: true, loading: false });
+      } else {
+        throw new Error('Registration failed');
+      }
     } catch (error: any) {
-      console.error('‚ùå Registration failed:', error.response?.data?.detail || error.message);
+      console.error('‚ùå Registration failed:', error.response?.data?.message || error.message);
       set({ loading: false });
-      throw new Error(error.response?.data?.detail || 'Registration failed');
+      throw new Error(error.response?.data?.message || 'Registration failed');
     }
   },
 
@@ -84,16 +129,17 @@ export const useAuthStore = create<AuthState>((set, get) => ({
     set({ loading: true });
     try {
       const token = await AsyncStorage.getItem('token');
-      if (token) {
-        console.log('üîÑ Loading user profile...');
-        const response = await api.get('/api/auth/me');
-        console.log('‚úÖ User profile loaded:', response.data.email);
-        set({ user: response.data, token, isAuthenticated: true, loading: false });
+      const userStr = await AsyncStorage.getItem('user');
+      
+      if (token && userStr) {
+        const user = JSON.parse(userStr);
+        console.log('‚úÖ User loaded from storage:', user.email);
+        set({ user, token, isAuthenticated: true, loading: false });
       } else {
         set({ loading: false });
       }
     } catch (error) {
-      console.error('‚ùå Failed to load user profile');
+      console.error('‚ùå Failed to load user');
       await get().logout();
       set({ loading: false });
     }
@@ -102,12 +148,17 @@ export const useAuthStore = create<AuthState>((set, get) => ({
   updateProfile: async (data: Partial<User>) => {
     try {
       console.log('üìù Updating profile...');
-      const response = await api.put('/api/auth/profile', data);
-      console.log('‚úÖ Profile updated');
-      set({ user: response.data });
+      // TODO: Implement profile update endpoint when available
+      const currentUser = get().user;
+      if (currentUser) {
+        const updatedUser = { ...currentUser, ...data };
+        await AsyncStorage.setItem('user', JSON.stringify(updatedUser));
+        set({ user: updatedUser });
+        console.log('‚úÖ Profile updated locally');
+      }
     } catch (error: any) {
-      console.error('‚ùå Profile update failed:', error.response?.data?.detail || error.message);
-      throw new Error(error.response?.data?.detail || 'Update failed');
+      console.error('‚ùå Profile update failed:', error.message);
+      throw new Error('Update failed');
     }
   },
 }));
